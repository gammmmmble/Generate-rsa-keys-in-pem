def find_d(e, m):
	i =  0
	while 1:
		if(m*i + 1) % e == 0:
			return (m*i + 1)//e
		i = i + 1
	return -1
	'''
def inverseMode(p, q):
	i = 1
	while 1:
		if(pow(q, i, p) == 1):
			return pow(q, i - 1)
		i = i + 1
	return -1
	'''
def main():
	
	e = 65535
	
	p=152022676279833140429877913306787548239377983266932453820067817815811612945282975608134672699879539746490589417131215664723318844039574340093483429374820621433816870897191115191971131513889436269052414496453966588782931947645572988393197322601210997176669496648059452031371742109283050770427362091581729114989
	q=146566651445893368688905763456764452337838032763682676221025945682991649793340026890854472049371592346730454191221850371408406581475418579008881111571092173530748331667107582622861309727150160914480781841205155449584530166428770678446245420268299373990760393892275516496045323891286171163252445865368303271017
	

	m = (p - 1)*(q - 1)
	d = find_d(e, m)
	'''
	p =17
	q = 11
	n = 187

	e= 7
	d = 23
	'''
	print 'asn1=SEQUENCE:rsa_key\n'
	print '[rsa_key]'
	print 'version=INTEGER:0'
	print 'modulus=INTEGER:' + (p * q).__str__()
	print 'pubExp=INTEGER:' + e.__str__()
	print 'privExp=INTEGER:' + d.__str__()
	print 'p=INTEGER:' + p.__str__()
	print 'q=INTEGER:' + q.__str__()
	print 'e1=INTEGER:' + (d % (p - 1)).__str__()
	print 'e2=INTEGER:' + (d % (q - 1)).__str__()
	print 'coeff=INTEGER:' + pow(q, p-2, p).__str__()#inverse mod, since p is prime
	'''
	print d
	print (d * e) % m
	'''
main()
